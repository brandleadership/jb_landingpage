{
    "BSI Element": {
        "scope": "html,twig",
        "prefix": "bsi",
        "body": ["<div data-bsi-element=\"$1\">$0</div>"],
        "description": "BSI Element Tag"
    },

    "BSI Element Attribute": {
        "scope": "html,twig",
        "prefix": "bsielem",
        "body": ["data-bsi-element=\"$1\"$0"],
        "description": "BSI Element Attribute"
    },

    "Dropzone Div": {
        "scope": "html,twig",
        "prefix": "drop",
        "body": [
            "<div data-bsi-dropzone=\"$1\" ${2:data-bsi-dropzone-allowed-elements=\"$3\"} ${4:data-bsi-dropzone-max-number-of-elements=\"$5\"}>$0</div>"
        ],
        "description": "Container div holding attributes needed for dropzone"
    },

    "BSI Element + Dropzone": {
        "scope": "html,twig",
        "prefix": "dropbsi",
        "body": [
            "<div data-bsi-element=\"$1\" data-bsi-dropzone=\"$2\" ${3:data-bsi-dropzone-allowed-elements=\"$4\"} ${5:data-bsi-dropzone-max-number-of-elements=\"$6\"}>$0</div>"
        ],
        "description": "BSI Element Div also holding attributes needed for dropzone"
    },

    "Dropzone Attributes": {
        "scope": "html,twig",
        "prefix": "dropattr",
        "body": [
            "data-bsi-dropzone=\"$1\" ${2:data-bsi-dropzone-allowed-elements=\"$3\"} ${4:data-bsi-dropzone-max-number-of-elements=\"$5\"}$0"
        ],
        "description": "BSI Attributes used for BSI Dropzones"
    },

    "BSI Element Group": {
        "scope": "html,twig",
        "prefix": "bsig",
        "body": ["<div data-bsi-group=\"$1\">$0</div>"],
        "description": "Group of BSI content Elements for use in content-elements.twig"
    },

    "BSI Element Group Label": {
        "scope": "properties,twig",
        "prefix": "propgroup",
        "body": ["group.$1.label={{ $0 }}"],
        "description": "BSI Element group label property for design UI"
    },

    "BSI Element Properties Without Description": {
        "scope": "properties",
        "prefix": "propelem",
        "body": ["element.$1.label=$2\nelement.$1.icon=${0:snippet}"],
        "description": "Must-have BSI Element properties for design UI"
    },

    "BSI Element Properties With Description": {
        "scope": "properties",
        "prefix": "propelemd",
        "body": [
            "element.$1.label=$2\nelement.$1.description=$3\nelement.$1.icon=${0:snippet}"
        ],
        "description": "Must-have BSI Element properties for design UI + description"
    },

    "BSI Element Parts Label": {
        "scope": "properties",
        "prefix": "proppart",
        "body": [
            "element.$1.parts.${2|plain-text,formatted-text,link,video,image,form-field,form-select,form-textarea,form-checkbox,form-radio|}[$3].label=$4"
        ]
    },

    "HTML Editor Configs Properties": {
        "scope": "properties",
        "prefix": "prophtmledit",
        "body": "html-editor-config.$1.features=${2:bold,}${3:italic,}${4:underline,}${5:alignLeft,}${6:alignCenter,}${7:alignRight,}${8:formatOL,}${9:formatUL,}${10:textColor,}${11:fontSize,}${12:specialCharacters,}${13:insertLink,}${14:html}\n${15:html-editor-config.$1.formats=${16:h1,p}}\n${17:html-editor-config.$1.font-sizes=${18:8,9,10,11,12}}\n${19:html-editor-config.$1.font-size-unit=${20:px}}\n${21:html-editor-config.$1.font-size-default=${22:12}}\n${23:html-editor-config.$1.text-colors=${24:#}}\n${25:html-editor-config.$1.line-heights=${26:1.1,1.5}}\n${27:html-editor-config.$1.enter=${28:br}}\n\nelement.$29.parts.formatted-text.html-editor-config=$1",
        "description": "Definition of HTML Editor Configs for Formatted-Text BSI Element Part"
    },

    "Style Variants via Properties": {
        "scope": "properties",
        "prefix": "propstyles",
        "body": "style.$1.label=$2\nstyle.$1.class.$3.label=$4\nstyle.$1.class.$5.label=$6\n\nelement.$7.styles=$1${8:,$9}",
        "description": "Definition of different style variants of BSI elements"
    },

    "Twig Include for BSI Elements": {
        "scope": "twig",
        "prefix": "twinc",
        "body": [
            "{% include \"${1:content-elements}/${2:elements}/$3/template.twig\" ${4:with {$5\\}}%}$0"
        ]
    },

    "Twig Block": {
        "scope": "twig",
        "prefix": "twblo",
        "body": ["{% block $1 %}\n$2{% endblock %}$0"]
    },

    "Twig Extend": {
        "scope": "twig",
        "prefix": "twext",
        "body": ["{% extends '$1.twig' %}$0"]
    },

    "Twig Embed": {
        "scope": "twig",
        "prefix": "twemb",
        "body": [
            "{% embed '$1' ${2:with {$3}}%}\n{% block $4 %}\n$5{% endblock %}\n$6{% endembed %}$0"
        ]
    },

    "Twig If ElseIf Else": {
        "scope": "twig",
        "prefix": "twif",
        "body": [
            "{% if ${1:condition1} %}\n$2${3:\n{% elseif ${4:condition2} %\\}\n$5}${6:\n{% else %\\}\n$7}\n{% endif %}$0"
        ]
    },

    "Twig Set": {
        "scope": "twig",
        "prefix": "twset",
        "body": ["{% set ${1:variable_name} = ${2:variable_value} %}$0"]
    },

    "Design Properties Blocks": {
        "scope": "twig",
        "prefix": "propadd",
        "body": [
            "{% set elements = [\n'$1'\n] %}\n\n{% for element in elements %}\n{% include 'content-elements/elements/' ~ element ~ '/design.properties' %}\n{{ '\\n' }}\n{% endfor %}\n\n{% set layouts = [\n'$2'\n] %}\n\n{% for layout in layouts %}\n{% include 'content-elements/layouts/' ~ layout ~ '/design.properties' %}\n{{ '\\n' }}\n{% endfor %}\n\n{% set sections = [\n'$3'\n] %}\n\n{% for section in sections %}\n{% include 'content-elements/sections/' ~ section ~ '/design.properties' %}\n{{ '\\n' }}\n{% endfor %}\n$0"
        ],
        "description": "For use in the design.properties.twig file"
    },

    "Single Design Properties Block": {
        "scope": "twig",
        "prefix": "propsingleadd",
        "body": [
            "{% set $1 = [\n'$3'\n] %}\n\n{% for $2 in $1 %}\n{% include 'content-elements/$1/' ~ $2 ~ '/design.properties' %}\n{{ '\\n' }}\n{% endfor %}\n$0"
        ],
        "description": "For use in the design.properties.twig file"
    },

    "BSI Video Element Part's Properties": {
        "scope": "properties",
        "prefix": "proppartvid",
        "body": [
            "element.$1.label=Video\nelement.$1.icon=${2:youtube}\n\nelement.$1.parts.video[0].label=${3:Video Details}$0"
        ]
    },

    "Design Templates Block": {
        "scope": "twig",
        "prefix": "bsitempadd",
        "body": [
            "{% set elements = [\n'$1'\n] %}\n\n<div data-bsi-group=\"elements\">\n{% for element in elements %}\n{% include 'content-elements/elements/' ~ element ~ '/template.twig' %}\n{% endfor %}\n</div>\n{% set layouts = [\n'$2'\n] %}\n\n<div data-bsi-group=\"layouts\">\n{% for layout in layouts %}\n{% include 'content-elements/layouts/' ~ layout ~ '/template.twig' %}\n{% endfor %}\n</div>\n{% set sections = [\n'$3'\n] %}\n\n<div data-bsi-group=\"sections\">\n{% for section in sections %}\n{% include 'content-elements/sections/' ~ section ~ '/template.twig' %}\n{% endfor %}\n</div>\n$0"
        ],
        "description": "For use in the content-elements.twig file"
    },

    "Single Design Templates Block": {
        "scope": "twig",
        "prefix": "bsisingletempadd",
        "body": [
            "{% set $1 = [\n'$3'\n] %}\n\n<div data-bsi-group=\"$1\">\n{% for $2 in $1 %}\n{% include 'content-elements/$1/' ~ $2 ~ '/template.twig' %}\n{% endfor %}\n</div>\n$0"
        ],
        "description": "For use in the content-elements.twig file"
    },

    "Design Custom Script Blocks": {
        "scope": "twig",
        "prefix": "jsadd",
        "body": [
            "{% set elements = [\n'$1'\n] %}\n\n{% for element in elements %}\n{% include 'content-elements/elements/' ~ element ~ '/custom.js' %}\n{% endfor %}\n\n{% set layouts = [\n'$2'\n] %}\n\n{% for layout in layouts %}\n{% include 'content-elements/layouts/' ~ layout ~ '/custom.js' %}\n{% endfor %}\n\n{% set sections = [\n'$3'\n] %}\n\n{% for section in sections %}\n{% include 'content-elements/sections/' ~ section ~ '/custom.js' %}\n{% endfor %}\n$0"
        ],
        "description": "For use in the design.js.twig file"
    },

    "Single Design Custom Script Block": {
        "scope": "twig",
        "prefix": "jssingleadd",
        "body": [
            "{% set $1 = [\n'$3'\n] %}\n\n{% for $2 in $1 %}\n{% include 'content-elements/$1/' ~ $2 ~ '/custom.js' %}\n{% endfor %}\n$0"
        ],
        "description": "For use in the design.js.twig file"
    },

    "Js Function used to highlight required radiobutton fields": {
        "scope": "javascript",
        "prefix": "jsradioreq",
        "body": [
            "(function() {",
            "// Function which higlights required radiobuttons fields",
            "function highlightRequiredRadios() {",
            "let radioSets = document.getElementsByClassName(",
            "\"radiobutton-set-container\"",
            ");",
            "if (radioSets.length !== 0) {",
            "// .map only works for arrays, not for HTML Collections, so convert to array",
            "[...radioSets].map(function(radioSet) {",
            "if (radioSet.querySelector('input[required=\"\"]') !== null) {",
            "radioSet.parentNode.children[0].className +=\"required-radiobutton-field\";",
            "}",
            "});",
            "}",
            "}",
            "// Immediately run on page load",
            "highlightRequiredRadios();",
            "})();"
        ],
        "description": "Only fully functional if coupled with 'fpartradio' (twig) and 'cssradio' (css) snippets"
    },

    "Custom Form Feedback Generator": {
        "scope": "javascript",
        "prefix": "jsformfeedback",
        "body": [
        "(function () {\r",
        "    \r",
        "    const submissionForms = document.getElementsByClassName(\"submission-form\");\r",
        "    const amountOfForms = submissionForms.length;\r",
        "\r",
        "    if (amountOfForms > 0) {\r",
        "\r",
        "        function verifyFields(event) {\r",
        "\r",
        "            const form = event.target.closest( 'form' );\r",
        "\r",
        "            \r",
        "            event.preventDefault();\r",
        "             \r",
        "            // Get all of the required form fields\r",
        "            // Query the form fields in the order in which they appear in the form, to facilitate the addition of an eventually\r",
        "            // wanted scroll animation\r",
        "            let requiredFields = form.querySelectorAll('[required=\"\"]');\r",
        "\r",
        "            // Pick out all of the radiobuttons, as these must be handled differently\r",
        "            let radiobuttonNames = [];\r",
        "            let missingFields = [];\r",
        "            [...requiredFields].forEach(function (field) {\r",
        "                // Check if the currently iterated field is a radiobutton\r",
        "                if (field.tagName === \"INPUT\" && field.hasAttribute(\"type\") && field.getAttribute(\"type\") === \"radio\") {\r",
        "                    // Push the current radiobuttons name into the raidobuttonNames to not do the following thing twice\r",
        "                    const currentName = field.getAttribute(\"name\");\r",
        "                    if (radiobuttonNames.indexOf(currentName) === -1) {\r",
        "                        radiobuttonNames.push(currentName);\r",
        "                        // And in this case, check if any of the available options have been checked\r",
        "                        if (document.querySelector('input[type=\"radio\"][name=\"' + currentName + '\"]:checked') === null) {\r",
        "                            // If not, simply add the first radiobutton element of the group into the missingFields array\r",
        "                            missingFields.push(field);\r",
        "                            return;\r",
        "                        }\r",
        "                    }\r",
        "                } else if ((field.tagName === \"INPUT\" && field.hasAttribute(\"type\") && field.getAttribute(\"type\") === \"checkbox\")) {\r",
        "\r",
        "                    // In this case, simply return the concerned checkbox\r",
        "                    missingFields.push(field);\r",
        "                    return;\r",
        "\r",
        "                } else if (\r",
        "                    // Treat all of the following elements in the same way, as they should all gain a highlighted border \r",
        "                    // if they're missing\r",
        "                    (\r",
        "                        (field.tagName === \"INPUT\" && field.hasAttribute(\"type\")) &&\r",
        "                        field.getAttribute(\"type\") === \"text\" ||\r",
        "                        field.getAttribute(\"type\") === \"email\"\r",
        "                    ) ||\r",
        "                    field.tagName === \"SELECT\" ||\r",
        "                    field.tagName === \"TEXTAREA\"\r",
        "                ) {\r",
        "                    // Add a class used to highlight field as missing\r",
        "                    let fieldsClass = field.classList;\r",
        "                    // If the current field value is empty\r",
        "                    if (field.value.trim() === \"\") {\r",
        "                        if (!fieldsClass.contains(\"missing-required-field\")) {\r",
        "                            fieldsClass.add(\"missing-required-field\");\r",
        "                        }\r",
        "                        // And in this case add the field into the field of missing fields\r",
        "                        missingFields.push(field);\r",
        "                        return;\r",
        "                    } else {\r",
        "                        if (fieldsClass.contains(\"missing-required-field\")) {\r",
        "                            fieldsClass.remove(\"missing-required-field\");\r",
        "                        }\r",
        "                    }\r",
        "                }\r",
        "            });\r",
        "\r",
        "            if (missingFields.length !== 0) {\r",
        "                document.getElementById(\"required-missing-feedback\").className=\"enable\";\r",
        "            } else {\r",
        "                document.getElementById(\"required-missing-feedback\").className = \"\";\r",
        "                // Form can now safely be submitted\r",
        "                form.submit();\r",
        "            }\r",
        "        }\r",
        "\r",
        "        document\r",
        "            .querySelector('.submission-form input[type=\"submit\"]')\r",
        "            .addEventListener(\"click\", function(event) {\r",
        "                verifyFields(event);\r",
        "            });\r",
        "\r",
        "    }\r",
        "}());"
        ],
        "description": "This snippet is used together with the snippets used to create forms and submit buttons 'partform' and 'fpartsubmit', respectively, and the 'cssformfeedback' snippet for according styling"
    },

    "Design Custom Styling Blocks": {
        "scope": "twig",
        "prefix": "lessadd",
        "body": [
            "{% set elements = [\n'$1'\n] %}\n\n{% for element in elements %}\n{% include 'content-elements/elements/' ~ element ~ '/styles.less' %}\n{% endfor %}\n\n{% set layouts = [\n'$2'\n] %}\n\n{% for layout in layouts %}\n{% include 'content-elements/layouts/' ~ layout ~ '/styles.less' %}\n{% endfor %}\n\n{% set sections = [\n'$3'\n] %}\n\n{% for section in sections %}\n{% include 'content-elements/sections/' ~ section ~ '/styles.less' %}\n{% endfor %}\n$0"
        ],
        "description": "For use in the components.less.twig file"
    },

    "Single Design Custom Styling Block": {
        "scope": "twig",
        "prefix": "lesssingleadd",
        "body": [
            "{% set $1 = [\n'$3'\n] %}\n\n{% for $2 in $1 %}\n{% include 'content-elements/$1/' ~ $2 ~ '/styles.less' %}\n{% endfor %}\n$0"
        ],
        "description": "For use in the components.less.twig file"
    },

    "Twig with block": {
        "scope": "twig",
        "prefix": "twwith",
        "body": ["with { $1 : $2 }$0"]
    },

    "Twig for block": {
        "scope": "twig",
        "prefix": "twfor",
        "body": ["{% for ${1|key,value\\,value|} in $2 %}\n$3\n{% endfor %}$0"]
    },

    "CSS Comment": {
        "scope": "css, less",
        "prefix": "csscomm",
        "body": "/* $1 */$0"
    },

    "Custom Checkbox Styling": {
        "scope": "css, less",
        "prefix": "csscheck",
        "body": [
            "/* disable default checkbox display */",
            "",
            "input[type=\"checkbox\"] {",
            "display: none;",
            "}",
            "",
            "/* correctly align content */",
            "",
            ".custom-checkbox-container {",
            "display: flex;",
            "flex-direction: row-reverse;",
            "justify-content: flex-end;",
            "align-items: center;",
            "}",
            "",
            "/* accomodate spacing for custom checkbox in label */",
            "",
            ".custom-checkbox-container label {",
            "padding-left: 30px;",
            "/* In BSI, the label cannot wrap around the input element,",
            "as it is traditionally done when using custom checkbox for optimal",
            "UX + styling. Hence, we have to position the checkbox label",
            "above the .custom-checkbox-frame; otherwise the checkbox would",
            "not be directly clickable */",
            "/* to assure that checkbox is always clickable (place label above) */",
            "z-index: 2;",
            "margin-left: -15px;",
            "}",
            "",
            ".custom-checkbox-container label:hover {",
            "cursor: pointer;",
            "}",
            "",
            "/* create custom checkbox frame */",
            "",
            ".custom-checkbox-container .custom-checkbox-frame {",
            "background-color: white;",
            "width: 15px;",
            "height: 15px;",
            "border: 1px solid black;",
            "display: flex;",
            "justify-content: center;",
            "/* assure that checkbox is clickable (place below label) */",
            "z-index: 1;",
            "}",
            "",
            ".custom-checkbox-container label:hover ~ .custom-checkbox-frame {",
            "background-color: #eee;",
            "}",
            "",
            "/* create custom checkbox checked symbol */",
            "",
            ".custom-checkbox-frame::after {",
            "content: \"\";",
            "width: 4px;",
            "height: 9px;",
            "transform: rotate(45deg);",
            "border-bottom: 2px solid black;",
            "border-right: 2px solid black;",
            "display: none;",
            "/* to assure that checkbox is clickable (place below label) also when checked */",
            "z-index: 1;",
            "}",
            "",
            ".custom-checkbox-container input:checked ~ .custom-checkbox-frame::after {",
            "display: block;",
            "}"
        ],
        "description": "Allows for custom styling while compatible with BSI requirements"
    },

    "Custom Radiobutton Styling": {
        "scope": "css, less",
        "prefix": "cssradio",
        "body": [
            "/* highlight required radiobutton sets with required star */",
            ".required-radiobutton-field::after {",
            "content: \"*\";",
            "color: red;",
            "padding-left: 5px;",
            "}",
            "/* disable default radiobutton display */",
            "",
            "input[type=\"radio\"] {",
            "display: none;",
            "}",
            "",
            "/* correctly align content */",
            "",
            ".custom-radiobutton-container {",
            "display: flex;",
            "flex-direction: row-reverse;",
            "justify-content: flex-end;",
            "align-items: center;",
            "}",
            "",
            "/* accomodate spacing for custom radiobutton in label */",
            "",
            ".custom-radiobutton-container label {",
            "padding-left: 30px;",
            "/* In BSI, the label cannot wrap around the input element,",
            "as it is traditionally done when using custom radiobutton for optimal",
            "UX + styling. Hence, we have to position the radiobutton label",
            "above the .custom-radiobutton-frame; otherwise the radiobutton would",
            "not be directly clickable */",
            "/* to assure that checkbox is always clickable (place label above) */",
            "z-index: 2;",
            "margin-left: -15px;",
            "}",
            "",
            ".custom-radiobutton-container label:hover {",
            "cursor: pointer;",
            "}",
            "",
            "/* create custom radiobutton frame */",
            "",
            ".custom-radiobutton-container .custom-radiobutton-frame {",
            "background-color: white;",
            "width: 15px;",
            "height: 15px;",
            "border: 1px solid black;",
            "display: flex;",
            "justify-content: center;",
            "/* assure that radiobutton is clickable (place below label) */",
            "z-index: 1;",
            "}",
            "",
            ".custom-radiobutton-container label:hover ~ .custom-radiobutton-frame {",
            "background-color: #eee;",
            "}",
            "",
            "/* create custom radiobutton checked symbol */",
            "",
            ".custom-radiobutton-frame::after {",
            "content: \"\";",
            "width: 4px;",
            "height: 9px;",
            "transform: rotate(45deg);",
            "border-bottom: 2px solid black;",
            "border-right: 2px solid black;",
            "display: none;",
            "/* to assure that radiobutton is clickable (place below label) also when checked */",
            "z-index: 1;",
            "}",
            "",
            ".custom-radiobutton-container input:checked ~ .custom-radiobutton-frame::after {",
            "display: block;",
            "}"
        ],
        "description": "Allows for custom styling while compatible with BSI requirements"
    },

    "Radiobutton Scale Styling": {
        "scope": "css, less",
        "prefix": "cssrating",
        "body": [
            ".rating-set-container {",
            "display: flex;",
            "width: 100%;",
            "margin-top: 10px;",
            "height: 40px;",
            "}",
            "",
            ".rating-set-container > .custom-radiobutton-container {",
            "flex-grow: 1;",
            "position: relative;",
            "}",
            "",
            ".rating-set-container .custom-radiobutton-container label {",
            "position: absolute;",
            "width: 100%;",
            "height: 100%;",
            "padding: 0;",
            "margin: 0;",
            "display: flex;",
            "justify-content: center;",
            "align-items: center;",
            "}",
            "",
            "/* highlight required radiobutton sets with required star */",
            ".required-radiobutton-field::after {",
            "content: \"*\";",
            "color: red;",
            "padding-left: 5px;",
            "}",
            "/* disable default radiobutton display */",
            "",
            "input[type=\"radio\"] {",
            "display: none;",
            "}",
            "",
            "/* correctly align content */",
            "",
            ".custom-radiobutton-container {",
            "display: flex;",
            "flex-direction: row-reverse;",
            "justify-content: flex-end;",
            "align-items: center;",
            "}",
            "",
            "/* accomodate spacing for custom radiobutton in label */",
            "",
            ".custom-radiobutton-container label {",
            "padding-left: 30px;",
            "/* In BSI, the label cannot wrap around the input element,",
            "as it is traditionally done when using custom radiobutton for optimal",
            "UX + styling. Hence, we have to position the radiobutton label",
            "above the .custom-radiobutton-frame; otherwise the radiobutton would",
            "not be directly clickable */",
            "/* to assure that checkbox is always clickable (place label above) */",
            "z-index: 2;",
            "margin-left: -15px;",
            "}",
            "",
            ".custom-radiobutton-container label:hover {",
            "cursor: pointer;",
            "}",
            "",
            "/* create custom radiobutton frame */",
            "",
            ".custom-radiobutton-container .custom-radiobutton-frame-rating {",
            "background-color: white;",
            "width: 15px;",
            "height: 15px;",
            "border: 1px solid black;",
            "display: flex;",
            "justify-content: center;",
            "/* assure that radiobutton is clickable (place below label) */",
            "z-index: 1;",
            "width: 100%;",
            "height: 100%;",
            "}",
            "",
            ".rating-set-container .custom-radiobutton-container:first-of-type .custom-radiobutton-frame-rating {",
            "border-top-left-radius: 10px;",
            "border-bottom-left-radius: 10px;",
            "}",
            "",
            ".rating-set-container .custom-radiobutton-container:last-of-type .custom-radiobutton-frame-rating {",
            "border-top-right-radius: 10px;",
            "border-bottom-right-radius: 10px;",
            "}",
            "",
            ".custom-radiobutton-container label:hover ~ .custom-radiobutton-frame-rating {",
            "background-color: #eee;",
            "}",
            "",
            ".custom-radiobutton-container input:checked ~ .custom-radiobutton-frame-rating {",
            "background-color: #13aff0;",
            "}",
            "",
            ".rating-labels {",
            "margin-top: 10px;",
            "display: flex;",
            "flex-direction: row;",
            "width: 100%;",
            "}",
            "",
            ".rating-labels .label-left {",
            "width: 50%;",
            "display: flex;",
            "justify-content: flex-start;",
            "}",
            "",
            ".rating-labels .label-right {",
            "width: 50%;",
            "display: flex;",
            "justify-content: flex-end;",
            "}"
        ],
        "description": "Allows for custom styling while compatible with BSI requirements"
    },

    "Styling for Custom Form Feedback": {
        "scope": "css, less",
        "prefix": "cssformfeedback",
        "body": [
        "form .missing-required-field {\r",
        "  border-color: red;\r",
        "}\r",
        "\r",
        "#required-missing-feedback {\r",
        "    display: flex;\r",
        "    width: 100%;\r",
        "    justify-content: center;\r",
        "    color: red;\r",
        "    overflow: hidden;\r",
        "    height: 0;\r",
        "}\r",
        "\r",
        "#required-missing-feedback.enable {\r",
        "    height: auto;\r",
        "}"
        ],
        "description": "This snippet can be used together with 'jsformfeedback' and 'partform' and 'fpartsubmit' for custom form submission feedbacks"
    },

    "Twig Comment": {
        "scope": "twig",
        "prefix": "twcomm",
        "body": "{# $1 #}$0"
    },

    "No Edit Button in BSI": {
        "scope": "twig",
        "prefix": "bsihide",
        "body": "data-bsi-hide-edit-button=\"true\"$0"
    },

    "BSI Element Part Attribute": {
        "scope": "twig",
        "prefix": "part",
        "body": "data-bsi-element-part=\"$1\"$0"
    },

    "BSI Image": {
        "scope": "twig",
        "prefix": "partimg",
        "body": "<img src=\"./img/$1\" alt=\"$2\" data-bsi-element-part=\"image\"/>$0"
    },

    "BSI Plain Text": {
        "scope": "twig",
        "prefix": "partplain",
        "body": "<p data-bsi-element-part=\"plain-text\" ${1:data-bsi-multiline=\"\"}>$2</p>$0"
    },

    "BSI Formatted Text": {
        "scope": "twig",
        "prefix": "partformatted",
        "body": "<p data-bsi-element-part=\"formatted-text\">$1</p>$0"
    },

    "BSI Video": {
        "scope": "twig",
        "prefix": "partvid",
        "body": "<div data-bsi-element-part=\"video\" data-bsi-video-data-url=\"\">\n${1:<iframe style=\"width: 100%; height: 100%;\"></iframe>}\n${2:<img src=\"$3\" data-bsi-video-thumbnail=\"\"/>}\n${4:<p data-bsi-video-title=\"$5\"></p>}\n${6:<p data-bsi-video-description=\"\">$7</p>}\n${8:<a data-bsi-video-link=\"\">$9</a>}\n</div>$0"
    },

    "BSI Link": {
        "scope": "twig",
        "prefix": "partlink",
        "body": "<a data-bsi-element-part=\"link\" ${1:data-bsi-link-fixed-inner-html=\"\"}>\n${2:<span data-bsi-link-text-part=\"\">$3</span>}$4\n</a>$0"
    },

    "BSI Form": {
        "scope": "twig",
        "prefix": "partform",
        "body": "<form data-bsi-element-part=\"form\" class=\"submission-form\">\n<div data-bsi-form-validation=\"\">\n<p data-bsi-form-validation-item=\"\"></p>\n</div>\n<div data-bsi-dropzone=\"${1:form-container}\" data-bsi-dropzone-allowed-elements=\"$2\"></div>\n<div>\n<input type=\"submit\" value=\"${3:Senden}\" spellcheck=\"false\"/>\n<input type=\"reset\" value=\"${4:Zurücksetzen}\" spellcheck=\"false\"/>\n</div>\n</form>$0"
    },

    "Required Form Field Styling": {
        "scope": "css, less",
        "prefix": "cssreq",
        "body": ".reverse-for-required { display:flex; flex-direction: column-reverse; }\n\n/* spacing needed due to reversing */ .reverse-for-required > label {margin-bottom: 3px;}\n\ninput:not([type=\"radio\"]):required ~ label::after, select:required ~ label::after, textarea:required ~ label::after {content: \"*\";color: $1;padding-left: 5px;}$0"
    },

    "BSI Form Select": {
        "scope": "twig",
        "prefix": "fpartsel",
        "body": "<div data-bsi-element-part=\"form-select\" data-bsi-value-list=\"$1\" class=\"reverse-for-required\" ${2:data-bsi-value=\"$3\"} ${4:data-bsi-form-select-fixed-value-list=\"$5\"}>\n<select id=\"$6\" name=\"$6\" ${7:class=\"$8\"}><option value=\"$9\">$10</option></select>\n<label for=\"$6\">$11</label>\n</div>$0"
    },

    "BSI Form Select Value List": {
        "scope": "twig",
        "prefix": "fpartselval",
        "body": "$1${2:|$3}",
        "description": "For different value + label"
    },

    "BSI Form Input": {
        "scope": "twig",
        "prefix": "fpartinp",
        "body": "<div data-bsi-element-part=\"form-field\" class=\"reverse-for-required\" ${2:data-bsi-form-field-fixed-type=\"$3\"}>\n<input id=\"$4\" name=\"$4\" type=\"$5\" ${6:class=\"$7\"} ${8:pattern=\"$9\" title=\"$10\"} spellcheck=\"false\"/>\n<label for=\"$4\">$11</label>\n</div>$0"
    },

    "BSI Form Custom Checkbox": {
        "scope": "twig",
        "prefix": "fpartbox",
        "body": "<div data-bsi-element=\"${1:checkbox}\">\n<div data-bsi-element-part=\"form-checkbox\" class=\"custom-checkbox-container\" data-bsi-form-field-fixed-type=\"\">\n<input id=\"${2:sample-checkbox}\"\nname=\"${2:sample-checkbox}\"\ntype=\"checkbox\"\nclass=\"custom-checkbox-field\" spellcheck=\"false\"/>\n<label for=\"${2:sample-checkbox}\">$3</label>\n<span class=\"custom-checkbox-frame\"></span>\n</div>\n</div>$0"
    },

    "BSI Form Custom Radiobutton": {
        "scope": "twig",
        "prefix": "fpartradio_normal",
        "body": "<div data-bsi-element=\"radiobutton-container\" class=\"radiobutton-container-wrapper\">\n<div id=\"${8:field-id}\" data-bsi-element-part=\"form-radio\"\ndata-bsi-value-list=\"$1|$2\n$3|$4\"\n${5:data-bsi-fixed-value-list=\"\"}>\n<label>$7</label>\n<div data-bsi-radio-group=\"\" class=\"radiobutton-set-container\">\n<div data-bsi-radio-item=\"\" class=\"custom-radiobutton-container\">\n<input type=\"radio\" name=\"$6\" id=\"$6-1\" value=\"$2\" spellcheck=\"false\"/>\n<label for=\"$6-1\">$1</label>\n<span class=\"custom-radiobutton-frame\"></span>\n</div>\n<div data-bsi-radio-item=\"\" class=\"custom-radiobutton-container\">\n<input type=\"radio\" name=\"$6\" id=\"$6-2\" value=\"$4\" spellcheck=\"false\"/>\n<label for=\"$6-2\">$3</label>\n<span class=\"custom-radiobutton-frame\"></span>\n</div>\n</div>\n</div>\n</div>$0",
        "description": "Custom radiobuttons ensemble.\nUse together with styles accessible via 'cssradio' snippet (in elements' styles.less) for proper layout and 'jsradioreq' snippet (in elements' custom.js) for required highlighting of main label"
    },

    "BSI Form Scale Radiobutton": {
        "scope": "twig",
        "prefix": "fpartradio_scale",
        "body": "<div data-bsi-element=\"radiobutton-container\" class=\"radiobutton-container-wrapper\">\n<div id=\"${8:field-id}\" data-bsi-element-part=\"form-radio\"\ndata-bsi-value-list=\"$1|$2\n$3|$4\"\n${5:data-bsi-fixed-value-list=\"\"}>\n<label>$7</label>\n<div data-bsi-radio-group=\"\" class=\"radiobutton-set-container rating-set-container\">\n<div data-bsi-radio-item=\"\" class=\"custom-radiobutton-container\">\n<input type=\"radio\" name=\"$6\" id=\"$6-1\" value=\"$2\" spellcheck=\"false\"/>\n<label for=\"$6-1\">$1</label>\n<span class=\"custom-radiobutton-frame-rating\"></span>\n</div>\n<div data-bsi-radio-item=\"\" class=\"custom-radiobutton-container\">\n<input type=\"radio\" name=\"$6\" id=\"$6-2\" value=\"$4\" spellcheck=\"false\"/>\n<label for=\"$6-2\">$3</label>\n<span class=\"custom-radiobutton-frame-rating\"></span>\n</div>\n</div>\n</div>\n<div class=\"rating-labels\">\n<span class=\"label-left\">$9</span>\n<span class=\"label-right\">$10</span>\n</div>\n</div>$0",
        "description": "Custom rating scale.\nUse together with 'cssrating' snippet (in elements' styles.less) for proper layout and 'jsradioreq' snippet (in elements' custom.js) for required highlighting of main label"
    },

    "BSI Form Rating Scale Labels": {
        "scope": "twig",
        "prefix": "fpartradio_scale_labels",
        "body": "<div class=\"rating-labels\">\n<span class=\"label-left\">$1</span>\n<span class=\"label-right\">$2</span>\n</div>$0",
        "description": "Labels of radiobutton (NPS) Extremes, to be placed as last div within 'fpartradio', and apply 'cssrating' styles"
    },

    "BSI Form Custom Radio Item": {
        "scope": "twig",
        "prefix": "fpartradioitem",
        "body": "<div data-bsi-radio-item=\"\" class=\"custom-radiobutton-container\">\n<input type=\"radio\" name=\"$2\" id=\"$2-$1\" value=\"$1\" spellcheck=\"false\"/>\n<label for=\"$2-$1\">$3</label>\n<span class=\"${4|custom-radiobutton-frame,custom-radiobutton-frame-rating|}\"></span>\n</div>$0",
        "description": "Choose between the 'custom-radiobutton-frame' or the 'custom-radiobutton-frame-rating' option to add either a custom radiobutton or a scale element, respectively.\nUse in conjunction with the respective style snippets 'cssradio' or 'cssrating' in the elements' styles.less file."
    },

    "BSI Form Textarea": {
        "scope": "twig",
        "prefix": "fpartarea",
        "body": "<div data-bsi-element-part=\"form-textarea\" class=\"reverse-for-required\">\n<textarea id=\"$1\" name=\"$1\" ${2:class=\"$3\"} ${4:rows=\"$5\" cols=\"$6\"} spellcheck=\"false\"></textarea>\n<label for=\"$1\">$7</label>\n</div>$0"
    }
}
